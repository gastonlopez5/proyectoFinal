/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nutricionista2.vistas;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import nutricionista2.modelo.Comida;
import nutricionista2.modelo.ComidaData;
import nutricionista2.modelo.Conexion;
import nutricionista2.modelo.Dieta;
import nutricionista2.modelo.DietaData;
import nutricionista2.modelo.Paciente;
import nutricionista2.modelo.PacienteData;

/**
 *
 * @author gaston
 */
public class VistaDieta extends javax.swing.JInternalFrame {
    
    private DefaultTableModel modeloComidasNoSelec;
    private DefaultTableModel modeloComidasSelec;
    private ArrayList<Paciente> listaPacientes;
    private ArrayList<Comida> listaComidasXPaciente;
    private ArrayList<Comida> listaComidas;
    private ArrayList<Comida> listaComidasNueva1;
    private ArrayList<Comida> listaComidasNueva2;
    private ArrayList<Comida> listaComidasNueva3;
    private ArrayList<Dieta> listaDietas;
    private PacienteData pacienteData;
    private DietaData dietaData;
    private ComidaData comidaData;
    private Paciente paciente;
    private LocalDate fecha;
    private Dieta dieta;
    private Conexion conexion;

    /**
     * Creates new form VistaDieta
     */
    public VistaDieta() {
        initComponents();
        try {
            conexion = new Conexion("jdbc:mysql://localhost/nutricionista2", "root", "");
    
            modeloComidasNoSelec = new DefaultTableModel();
            modeloComidasSelec = new DefaultTableModel();
        
            pacienteData = new PacienteData(conexion);
            listaPacientes =(ArrayList)pacienteData.obtenerPacientes();
            
            dietaData = new DietaData(conexion);
            
            comidaData = new ComidaData(conexion);
            listaComidas = (ArrayList)comidaData.obtenerComidas();
            
            armarCabeceraTablas();
            cargarPacientes();
        
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(VistaDieta.class.getName()).log(Level.SEVERE, null, ex);
            } 
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbPacientes = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtFecInicio = new javax.swing.JTextField();
        jtFecFinal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtPesoBuscado = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaComidasNoSelec = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtTablaComidasSelec = new javax.swing.JTable();
        jbGuardar = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbAgregar = new javax.swing.JButton();
        jbQuitar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jtPesoInicial = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jtMensaje = new javax.swing.JTextField();
        jbLimpiar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        cbFechas = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("- DIETA -");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("ELEGIR PACIENTE:");

        cbPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPacientesActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("FECHA DE INICIO:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("FECHA DE FINALIZACION:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("PESO BUSCADO:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("ARMAR LISTA DE COMIDAS");

        jtTablaComidasNoSelec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTablaComidasNoSelec);

        jtTablaComidasSelec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtTablaComidasSelec);

        jbGuardar.setText("GUARDAR DIETA");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbActualizar.setText("ACTUALIZAR DIETA");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbBorrar.setText("BORRAR DIETA");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbAgregar.setText("AGREGAR>>");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        jbQuitar.setText("<<QUITAR");
        jbQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbQuitarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Comidas Disponibles");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Comidas Incluidas en la Dieta");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("PESO INICIAL:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel10.setText("ESTADO:");

        jtMensaje.setForeground(new java.awt.Color(255, 51, 51));

        jbLimpiar.setText("LIMPIAR");
        jbLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimpiarActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("ELEGIR FECHA DE INICIO DE LA DIETA:");

        cbFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFechasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbActualizar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel11)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbFechas, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtFecInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtFecFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtPesoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtPesoBuscado, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jLabel7)))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbAgregar)
                            .addComponent(jbQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addGap(27, 27, 27)
                        .addComponent(jtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(219, 219, 219))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbFechas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jtFecInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtFecFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jtPesoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtPesoBuscado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbGuardar)
                            .addComponent(jbActualizar)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbBorrar)
                    .addComponent(jLabel10)
                    .addComponent(jtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbLimpiar))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(jbAgregar)
                .addGap(41, 41, 41)
                .addComponent(jbQuitar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPacientesActionPerformed
        // TODO add your handling code here:
        
        
        paciente = (Paciente)cbPacientes.getSelectedItem();
        jtMensaje.setText("SELECCIONE UNA FECHA DE INICIO DE DIETA");
        
//        listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(paciente.getId());
//        
//        cargarDieta();
//        cargarComidasNoSelec();
//        cargarComidasSelec();
    }//GEN-LAST:event_cbPacientesActionPerformed

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        // TODO add your handling code here:
//        int filaSeleccionada = jtTablaComidasNoSelec.getSelectedRow();
//        
//        if(filaSeleccionada != -1){
//        
//            int idComida=(Integer)modeloComidasNoSelec.getValueAt(filaSeleccionada,0);
//            
//            Comida c = dietaData.buscarComida(idComida);
//            listaComidasXPaciente.add(c);
//            cargarComidasNoSelec();
//            cargarComidasSelec();
//            jbQuitar.setEnabled(true);
            int[] filasSeleccionadas = jtTablaComidasNoSelec.getSelectedRows();
        
            for(int i=0;i<filasSeleccionadas.length;i++){
                int filaSeleccionada = filasSeleccionadas[i];
                int idComida=(Integer)modeloComidasNoSelec.getValueAt(filaSeleccionada,0);

                Comida c = dietaData.buscarComida(idComida);
                listaComidasXPaciente.add(c);

            }
            
            cargarComidasNoSelec();
            cargarComidasSelec();
            jbQuitar.setEnabled(true);
            
    }//GEN-LAST:event_jbAgregarActionPerformed

    private void jbQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbQuitarActionPerformed
        // TODO add your handling code here:
//        int filaSeleccionada = (Integer)jtTablaComidasSelec.getSelectedRow();
//        listaComidasNueva3 = (ArrayList)listaComidasXPaciente.clone();
//        
//        int idComida = (Integer)modeloComidasSelec.getValueAt(filaSeleccionada,0);
//        
//        for (Comida item:listaComidasNueva3){
//            if (item.getId() == idComida){
//                listaComidasXPaciente.remove(item);
//            }
//        }
//        
//        cargarComidasNoSelec();
//        cargarComidasSelec();
//        listaComidasNueva3.clear();

        int[] filasSeleccionadas = jtTablaComidasSelec.getSelectedRows();
        listaComidasNueva3 = (ArrayList)listaComidasXPaciente.clone();
        
        for (int i=0;i<filasSeleccionadas.length;i++){
            int idComida = (Integer)modeloComidasSelec.getValueAt(filasSeleccionadas[i],0);
        
            for (Comida item:listaComidasNueva3){
                if (item.getId() == idComida){
                    listaComidasXPaciente.remove(item);
                }
            }
        }
        
        cargarComidasNoSelec();
        cargarComidasSelec();
        listaComidasNueva3.clear();
        
    }//GEN-LAST:event_jbQuitarActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        // TODO add your handling code here:
        try{
            LocalDate fecIni = LocalDate.parse(jtFecInicio.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate fecFin = LocalDate.parse(jtFecFinal.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            
            try{
                double pesoInicial = Double.parseDouble(jtPesoInicial.getText());
                double pesoBuscado = Double.parseDouble(jtPesoBuscado.getText());
                
                if (!listaComidasXPaciente.isEmpty() && (fecFin.isAfter(fecIni))){
                    Dieta dieta = new Dieta(paciente, fecIni, fecFin, pesoInicial, pesoBuscado, listaComidasXPaciente);
                    dietaData.guardarPerfilDeDieta(dieta);

                    jtMensaje.setText("DIETA GUARDADA");
                    jbBorrar.setEnabled(true);
                    jbActualizar.setEnabled(true);
                    
                }else{
                    jtMensaje.setText("DIETA NO GUARDADO");
                }
                
            }catch(NumberFormatException ex){
                jtMensaje.setText("DIETA NO GUARDADO");
            }
            
        }catch (DateTimeParseException ex){
            jtMensaje.setText("DIETA NO GUARDADO");
        }
                
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        // TODO add your handling code here:
        try{
            LocalDate fecIni = LocalDate.parse(jtFecInicio.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate fecFin = LocalDate.parse(jtFecFinal.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            fecha = LocalDate.parse((String)cbFechas.getSelectedItem(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            
            try{
                double pesoInicial = Double.parseDouble(jtPesoInicial.getText());
                double pesoBuscado = Double.parseDouble(jtPesoBuscado.getText());

                Dieta dieta1 = dietaData.buscarDietaXPaciente(paciente.getId(), fecha);
                
                if (!listaComidasXPaciente.isEmpty() && (fecFin.isAfter(fecIni))){
                    Dieta dieta2 = new Dieta(dieta1.getId(), paciente, fecIni, fecFin, pesoInicial, pesoBuscado, listaComidasXPaciente);
                    dietaData.actualizarDietaDeUnPaciente(dieta2);
                    
                    jtMensaje.setText("DIETA ACTUALIZADA");
                    
                    cargarFechas();
                    
                }else{
                    jtMensaje.setText("DIETA NO ACTUALIZADA");
                }
                
            }catch(NumberFormatException ex){
                jtMensaje.setText("DIETA NO ACTUALIZADA");
            }
            
        }catch (DateTimeParseException ex){
            jtMensaje.setText("DIETA NO ACTUALIZADA");
        }
        
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        // TODO add your handling code here:
        Dieta dieta = dietaData.buscarDietaXPaciente(paciente.getId(), fecha);
        dietaData.borrarDietaDeUnPaciente(dieta.getId());

        jtMensaje.setText("DIETA BORRADA");
        
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimpiarActionPerformed
        // TODO add your handling code here:
        jtFecFinal.setText("");
        jtFecInicio.setText("");
        jtMensaje.setText("");
        jtPesoBuscado.setText("");
        jtPesoInicial.setText("");
    }//GEN-LAST:event_jbLimpiarActionPerformed

    private void cbFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFechasActionPerformed
        // TODO add your handling code here:
        fecha = LocalDate.parse((String)cbFechas.getSelectedItem(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(paciente.getId(), fecha);
        
        cargarDieta();
        cargarComidasNoSelec();
        cargarComidasSelec();
    }//GEN-LAST:event_cbFechasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbFechas;
    private javax.swing.JComboBox<Paciente> cbPacientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbLimpiar;
    private javax.swing.JButton jbQuitar;
    private javax.swing.JTextField jtFecFinal;
    private javax.swing.JTextField jtFecInicio;
    private javax.swing.JTextField jtMensaje;
    private javax.swing.JTextField jtPesoBuscado;
    private javax.swing.JTextField jtPesoInicial;
    private javax.swing.JTable jtTablaComidasNoSelec;
    private javax.swing.JTable jtTablaComidasSelec;
    // End of variables declaration//GEN-END:variables

    private void cargarPacientes() {
        for(Paciente item:listaPacientes){
            cbPacientes.addItem(item);
        }
        
        jtMensaje.setText("SELECCIONE UNA FECHA DE INICIO DE DIETA");
        cargarFechas();
        cargarDieta();
    }

    private void armarCabeceraTablas() {
        ArrayList<Object> columnas=new ArrayList<Object>();
        columnas.add("ID");
        columnas.add("Nombre");
        for(Object it:columnas){
            modeloComidasNoSelec.addColumn(it);
            modeloComidasSelec.addColumn(it);
        }
        jtTablaComidasNoSelec.setModel(modeloComidasNoSelec);
        jtTablaComidasSelec.setModel(modeloComidasSelec);
    }

    private void cargarComidasNoSelec() {
        borrarFilasTablaNoSelec();
        
//        Paciente p = (Paciente)cbPacientes.getSelectedItem();
        int aux = 0;
//        listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(p.getId());
        listaComidasNueva1 = (ArrayList)listaComidasXPaciente.clone();

        for (Comida c1:listaComidas){
            for (Comida c2:listaComidasNueva1){
                if (c1.getId() != c2.getId()){
                    aux += 1;
                }
            }
            
            if (listaComidasNueva1.size() == aux){
                modeloComidasNoSelec.addRow(new Object[]{c1.getId(),c1.getNombre()});
            }
            aux = 0;
        }
        listaComidasNueva1.clear();
            
    }

    private void borrarFilasTablaNoSelec() {
        
        int a = modeloComidasNoSelec.getRowCount()-1;

        for(int i=a;i>=0;i--){
   
            modeloComidasNoSelec.removeRow(i);
        }
    }

    private void cargarComidasSelec() {
        borrarFilasTablaSelec();
        
//        Paciente p = (Paciente)cbPacientes.getSelectedItem();
        listaComidasNueva2 = (ArrayList)listaComidasXPaciente.clone();
        
        for (Comida c:listaComidasNueva2){
            modeloComidasSelec.addRow(new Object[]{c.getId(),c.getNombre()});
        }
        
        listaComidasNueva2.clear();
    }

    private void borrarFilasTablaSelec() {
        int a = modeloComidasSelec.getRowCount()-1;

        for(int i=a;i>=0;i--){
   
            modeloComidasSelec.removeRow(i);
        }
    }

    private void cargarDieta() {
        
//        Paciente paciente = (Paciente)cbPacientes.getSelectedItem();
        int idPaciente = paciente.getId();
        Dieta dieta = dietaData.buscarDietaXPaciente(idPaciente, fecha);
        
        if (dieta == null){
            
            jbGuardar.setEnabled(true);
            jbActualizar.setEnabled(false);
            jbBorrar.setEnabled(false);
            jbQuitar.setEnabled(false);
            
            jtFecInicio.setText("");
            jtFecFinal.setText("");
            jtPesoInicial.setText("");
            jtPesoBuscado.setText("");
        
        }else{
        
            jbGuardar.setEnabled(false);
            jbActualizar.setEnabled(true);
            jbBorrar.setEnabled(true);
            jbQuitar.setEnabled(true);
            
            String fecInicio = constructorFecha(dieta.getFechaInicial().toString());
            String fecFinal = constructorFecha(dieta.getFechaFinal().toString());
            
            jtFecInicio.setText(fecInicio);
            jtFecFinal.setText(fecFinal);
            jtPesoInicial.setText(dieta.getPesoInicial()+"");
            jtPesoBuscado.setText(dieta.getPesoBuscado()+"");
                
        }
    }

    private String constructorFecha(String unString) {
        String anio = (String) unString.subSequence(0, 4);
        String mes = (String) unString.subSequence(5, 7);
        String dia = (String) unString.subSequence(8, 10);
        return dia + "/" + mes + "/" + anio;
    }

    private void cargarFechas() {
        
        cbFechas.removeAllItems();
        listaDietas = (ArrayList)dietaData.buscarDietasXPaciente(paciente.getId());
        for(Dieta dieta:listaDietas){
            cbFechas.addItem(constructorFecha(dieta.getFechaInicial().toString()));
        }
        
        listaDietas.clear();
        fecha = LocalDate.parse((String)cbFechas.getSelectedItem(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
    }
}
