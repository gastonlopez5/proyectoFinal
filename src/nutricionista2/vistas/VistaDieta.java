/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nutricionista2.vistas;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import nutricionista2.modelo.Comida;
import nutricionista2.modelo.ComidaData;
import nutricionista2.modelo.Conexion;
import nutricionista2.modelo.Dieta;
import nutricionista2.modelo.DietaData;
import nutricionista2.modelo.Paciente;
import nutricionista2.modelo.PacienteData;

/**
 *
 * @author gaston
 */
public class VistaDieta extends javax.swing.JInternalFrame {
    
    private DefaultTableModel modeloComidasNoSelec;
    private DefaultTableModel modeloComidasSelec;
    private DefaultTableModel modeloFechas;
    private ArrayList<Paciente> listaPacientes;
    private ArrayList<Comida> listaComidasXPaciente;
    private ArrayList<Comida> listaComidas;
    private ArrayList<Comida> listaComidasNueva1;
    private ArrayList<Comida> listaComidasNueva2;
    private ArrayList<Comida> listaComidasNueva3;
    private ArrayList<Comida> listaComidasNueva4;
    private ArrayList<Dieta> listaDietas;
    private ArrayList<Dieta> listaDietasNueva1;
    private PacienteData pacienteData;
    private DietaData dietaData;
    private ComidaData comidaData;
    private Paciente paciente;
    private LocalDate fecha;
    private Dieta dieta;
    private Conexion conexion;

    /**
     * Creates new form VistaDieta
     */
    public VistaDieta() {
        initComponents();
        try {
            conexion = new Conexion("jdbc:mysql://localhost/nutricionista2", "root", "");
    
            modeloComidasNoSelec = new DefaultTableModel();
            modeloComidasSelec = new DefaultTableModel();
            modeloFechas = new DefaultTableModel();
        
            pacienteData = new PacienteData(conexion);
            listaPacientes =(ArrayList)pacienteData.obtenerPacientes();
            
            dietaData = new DietaData(conexion);
            
            comidaData = new ComidaData(conexion);
            listaComidas = (ArrayList)comidaData.obtenerComidas();
            
            armarCabeceraTablaFechas();
            armarCabeceraTablas();
            cargarPacientes();
            cargarFechas();
            
            jtMensaje.setText("SELECCIONE PACIENTE Y FECHA. LUEGO PULSE BUSCARDIETA");
            jbGuardar.setEnabled(false);
            jbActualizar.setEnabled(false);
            jbBorrar.setEnabled(false);
            jbLimpiar.setEnabled(false);
            
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(VistaDieta.class.getName()).log(Level.SEVERE, null, ex);
            } 
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbPacientes = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtFecInicio = new javax.swing.JTextField();
        jtFecFinal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtPesoBuscado = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaComidasNoSelec = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtTablaComidasSelec = new javax.swing.JTable();
        jbGuardar = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbAgregar = new javax.swing.JButton();
        jbQuitar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jtPesoInicial = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jtMensaje = new javax.swing.JTextField();
        jbLimpiar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtTablaFechas = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jbBuscar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jtCalorias = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jbFiltrar = new javax.swing.JButton();
        jtSumaCalorias = new javax.swing.JTextField();
        jbSumar = new javax.swing.JButton();
        jbVolver = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("- DIETA -");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("ELEGIR PACIENTE:");

        cbPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPacientesActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("FECHA DE INICIO:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("PESO BUSCADO:");

        jtFecInicio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtFecInicioFocusLost(evt);
            }
        });

        jtFecFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtFecFinalFocusLost(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("PESO INICIAL:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("ARMAR LISTA DE COMIDAS");

        jtTablaComidasNoSelec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTablaComidasNoSelec);

        jtTablaComidasSelec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtTablaComidasSelec);

        jbGuardar.setText("GUARDAR DIETA");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbActualizar.setText("ACTUALIZAR DIETA");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbBorrar.setText("BORRAR DIETA");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbAgregar.setText("AGREGAR>>");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        jbQuitar.setText("<<QUITAR");
        jbQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbQuitarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Comidas Disponibles");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Comidas Incluidas en la Dieta");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("FECHA DE FINALIZACION:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel10.setText("ESTADO:");

        jtMensaje.setForeground(new java.awt.Color(255, 51, 51));

        jbLimpiar.setText("LIMPIAR Y CREAR DIETA");
        jbLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimpiarActionPerformed(evt);
            }
        });

        jtTablaFechas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jtTablaFechas);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("ELEGIR FECHA DE INICIO:");

        jbBuscar.setText("BUSCAR DIETA");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jLabel11.setText("MAX. CANTIDAD DE CALORIAS:");

        jLabel13.setText("SUMA DE CALORIAS:");

        jbFiltrar.setText("FILTRAR");
        jbFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFiltrarActionPerformed(evt);
            }
        });

        jbSumar.setText("SUMAR");
        jbSumar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSumarActionPerformed(evt);
            }
        });

        jbVolver.setText("VOLVER");
        jbVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel9)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jbBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jbBuscar)
                                        .addGap(33, 33, 33)
                                        .addComponent(jbActualizar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(160, 160, 160)
                                        .addComponent(jbLimpiar))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtFecInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jtFecFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtPesoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtPesoBuscado, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(16, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jbVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jbQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jbAgregar)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jbFiltrar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jtCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel11)))
                        .addGap(18, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel13)
                                .addGap(53, 53, 53))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jbSumar)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtSumaCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 14, Short.MAX_VALUE))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(397, 397, 397)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(185, 185, 185)
                        .addComponent(jLabel8)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(183, 183, 183))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jtFecInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jtFecFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jtPesoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4)
                                            .addComponent(jtPesoBuscado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jbActualizar)
                                            .addComponent(jbGuardar))
                                        .addGap(27, 27, 27))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel13))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jtCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jbFiltrar))
                                                .addGap(10, 10, 10))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jbSumar)
                                                    .addComponent(jtSumaCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(15, 15, 15))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jbBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtMensaje, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jbBorrar)
                                .addComponent(jbLimpiar))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAgregar)
                        .addGap(39, 39, 39)
                        .addComponent(jbVolver)
                        .addGap(36, 36, 36)
                        .addComponent(jbQuitar)
                        .addGap(109, 109, 109)
                        .addComponent(jLabel10)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPacientesActionPerformed
        // TODO add your handling code here:
        
        
        paciente = (Paciente)cbPacientes.getSelectedItem();
        jtMensaje.setText("SELECCIONE FECHA. LUEGO PULSE BUSCARDIETA");
        
        listaDietas = (ArrayList)dietaData.buscarDietasXPaciente(paciente.getId());
        cargarFechas();
        
        if (modeloFechas.getRowCount() == 0){
            jbBuscar.setEnabled(false);
            jbGuardar.setEnabled(true);
            listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(paciente.getId(), LocalDate.of(2090,05,04));
            borrarFilasTablaNoSelec();
            borrarFilasTablaSelec();
            cargarDieta();
            cargarComidas();
            jtMensaje.setText("ARME UNA NUEVA DIETA");
        }else{
            jbGuardar.setEnabled(false);
            jbActualizar.setEnabled(false);
            jbBorrar.setEnabled(false);
            jbLimpiar.setEnabled(false);
            jbBuscar.setEnabled(true);
        }
//        listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(paciente.getId());
//        
//        cargarDieta();
//        cargarComidasNoSelec();
//        cargarComidasSelec();
    }//GEN-LAST:event_cbPacientesActionPerformed

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        // TODO add your handling code here:
//        int filaSeleccionada = jtTablaComidasNoSelec.getSelectedRow();
//        
//        if(filaSeleccionada != -1){
//        
//            int idComida=(Integer)modeloComidasNoSelec.getValueAt(filaSeleccionada,0);
//            
//            Comida c = dietaData.buscarComida(idComida);
//            listaComidasXPaciente.add(c);
//            cargarComidasNoSelec();
//            cargarComidasSelec();
//            jbQuitar.setEnabled(true);
            int[] filasSeleccionadas = jtTablaComidasNoSelec.getSelectedRows();
            boolean salida = true;
        
            for(int i=0;i<filasSeleccionadas.length;i++){
                int filaSeleccionada = filasSeleccionadas[i];
                int idComida=(Integer)modeloComidasNoSelec.getValueAt(filaSeleccionada,0);

                Comida c = dietaData.buscarComida(idComida);
                listaComidasXPaciente.add(c);
                modeloComidasSelec.addRow(new Object[]{c.getId(),c.getNombre()});
                
            }
            
            while (salida){
                int filaSeleccionada = jtTablaComidasNoSelec.getSelectedRow();
                modeloComidasNoSelec.removeRow(filaSeleccionada);
                filasSeleccionadas = jtTablaComidasNoSelec.getSelectedRows();
                if (filasSeleccionadas.length == 0){
                    salida = false;
                }
            }
//            cargarComidasNoSelec();
//            cargarComidasSelec();
            jbQuitar.setEnabled(true);
            
    }//GEN-LAST:event_jbAgregarActionPerformed

    private void jbQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbQuitarActionPerformed
        // TODO add your handling code here:
//        int filaSeleccionada = (Integer)jtTablaComidasSelec.getSelectedRow();
//        listaComidasNueva3 = (ArrayList)listaComidasXPaciente.clone();
//        
//        int idComida = (Integer)modeloComidasSelec.getValueAt(filaSeleccionada,0);
//        
//        for (Comida item:listaComidasNueva3){
//            if (item.getId() == idComida){
//                listaComidasXPaciente.remove(item);
//            }
//        }
//        
//        cargarComidasNoSelec();
//        cargarComidasSelec();
//        listaComidasNueva3.clear();

        int[] filasSeleccionadas = jtTablaComidasSelec.getSelectedRows();
        listaComidasNueva3 = (ArrayList)listaComidasXPaciente.clone();
        boolean salida = true;
        
        for (int i=0;i<filasSeleccionadas.length;i++){
            int idComida = (Integer)modeloComidasSelec.getValueAt(filasSeleccionadas[i],0);
        
            for (Comida item:listaComidasNueva3){
                if (item.getId() == idComida){
                    listaComidasXPaciente.remove(item);
                    
                    modeloComidasNoSelec.addRow(new Object[]{item.getId(),item.getNombre()});
                }
            }
        }
        
        while (salida){
            int filaSeleccionada = jtTablaComidasSelec.getSelectedRow();
            modeloComidasSelec.removeRow(filaSeleccionada);
            filasSeleccionadas = jtTablaComidasSelec.getSelectedRows();
            if (filasSeleccionadas.length == 0){
                salida = false;
            }
        }
        
//        cargarComidasNoSelec();
//        cargarComidasSelec();
        listaComidasNueva3.clear();
        
    }//GEN-LAST:event_jbQuitarActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        // TODO add your handling code here:
        try{
            LocalDate fecIni = LocalDate.parse(jtFecInicio.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate fecFin = LocalDate.parse(jtFecFinal.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            
            try{
                double pesoInicial = Double.parseDouble(jtPesoInicial.getText());
                double pesoBuscado = Double.parseDouble(jtPesoBuscado.getText());
                
                if (!listaComidasXPaciente.isEmpty() && (fecFin.isAfter(fecIni)) && !(fecIni.isBefore(LocalDate.now())) && !(fecFin.isBefore(LocalDate.now()))){
                    Dieta dieta = new Dieta(paciente, fecIni, fecFin, pesoInicial, pesoBuscado, listaComidasXPaciente);
                    dietaData.guardarPerfilDeDieta(dieta);

                    jtMensaje.setText("DIETA GUARDADA");
                    jbBorrar.setEnabled(true);
                    jbActualizar.setEnabled(true);
                    jbBuscar.setEnabled(true);
                    jbLimpiar.setEnabled(true);
                    cargarFechas();
                    
                }else{
                    jtMensaje.setText("DIETA NO GUARDADA. REVISAR LOS CAMPOS LLENADOS");
                }
                
            }catch(NumberFormatException ex){
                jtMensaje.setText("DIETA NO GUARDADA. REVISAR LOS CAMPOS LLENADOS");
            }
            
        }catch (DateTimeParseException ex){
            jtMensaje.setText("DIETA NO GUARDADO");
        }
                
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        // TODO add your handling code here:
        try{
            LocalDate fecIni = LocalDate.parse(jtFecInicio.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            LocalDate fecFin = LocalDate.parse(jtFecFinal.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            fecha =  LocalDate.parse((String)modeloFechas.getValueAt(jtTablaFechas.getSelectedRow(),1), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            
            try{
                double pesoInicial = Double.parseDouble(jtPesoInicial.getText());
                double pesoBuscado = Double.parseDouble(jtPesoBuscado.getText());

                Dieta dieta1 = dietaData.buscarDietaXPaciente(paciente.getId(), fecha);
                
                if (!listaComidasXPaciente.isEmpty() && (fecFin.isAfter(fecIni)) && !(fecIni.isBefore(LocalDate.now())) && !(fecFin.isBefore(LocalDate.now()))){
                    Dieta dieta2 = new Dieta(dieta1.getId(), paciente, fecIni, fecFin, pesoInicial, pesoBuscado, listaComidasXPaciente);
                    dietaData.actualizarDietaDeUnPaciente(dieta2);
                    
                    jtMensaje.setText("DIETA ACTUALIZADA");
                    
                    cargarFechas();
                    
                }else{
                    jtMensaje.setText("DIETA NO ACTUALIZADA. REVISAR LOS CAMPOS SOLICITADOS");
                }
                
            }catch(NumberFormatException ex){
                jtMensaje.setText("DIETA NO ACTUALIZADA. REVISAR LOS CAMPOS SOLICITADOS");
            }
            
        }catch (DateTimeParseException ex){
            jtMensaje.setText("DIETA NO ACTUALIZADA");
        }
        
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        // TODO add your handling code here:
        try{
            int filaSeleccionada = jtTablaFechas.getSelectedRow();
            String aux = (String)modeloFechas.getValueAt(filaSeleccionada, 1);
            fecha = LocalDate.parse(aux, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            dieta = dietaData.buscarDietaXPaciente(paciente.getId(), fecha);
            dietaData.borrarDietaDeUnPaciente(dieta.getId());

            jtMensaje.setText("DIETA BORRADA");
            jtFecFinal.setText("");
            jtFecInicio.setText("");
            jtPesoBuscado.setText("");
            jtPesoInicial.setText("");
            jtSumaCalorias.setText("");

            borrarFilasTablaNoSelec();
            borrarFilasTablaSelec();
            cargarComidas();
            cargarFechas();
        }catch(ArrayIndexOutOfBoundsException ex){
            jtMensaje.setText("SELECCIONE UNA FECHA DE INICIO DE DIETA");
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimpiarActionPerformed
        // TODO add your handling code here:
        jtFecFinal.setText("");
        jtFecInicio.setText("");
        jtMensaje.setText("");
        jtPesoBuscado.setText("");
        jtPesoInicial.setText("");
        jtCalorias.setText("");
        jtSumaCalorias.setText("");
        
        borrarFilasTablaNoSelec();
        borrarFilasTablaSelec();
        cargarComidas();
        listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(paciente.getId(), LocalDate.of(2090,05,04));
        jbGuardar.setEnabled(true);
    }//GEN-LAST:event_jbLimpiarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        // TODO add your handling code here:
        try{
            if (modeloFechas.getRowCount() != 0){
                int filaSeleccionada = jtTablaFechas.getSelectedRow();
                String aux = (String)modeloFechas.getValueAt(filaSeleccionada, 1);
                fecha = LocalDate.parse(aux, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(paciente.getId(), fecha);

                cargarDieta();
                cargarComidasNoSelec();
                cargarComidasSelec();

                jbGuardar.setEnabled(false);
                jbActualizar.setEnabled(true);
                jbBorrar.setEnabled(true);
                jbLimpiar.setEnabled(true);

            }
        }catch(ArrayIndexOutOfBoundsException ex){
            jtMensaje.setText("SELECCIONE UNA FECHA DE INICIO DE DIETA");
        }
        
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFiltrarActionPerformed
        // TODO add your handling code here:
        int a = modeloComidasNoSelec.getRowCount();
        double calorias = Double.parseDouble(jtCalorias.getText());
        listaComidasNueva4 = (ArrayList)listaComidas.clone();
        listaComidasNueva4.clear();
        
        for (int i=0; i<a; i++){
            int idComida = (Integer)modeloComidasNoSelec.getValueAt(i, 0);
            Comida c = comidaData.buscarComida(idComida);
            if (c.getCalorias() <= calorias){
                listaComidasNueva4.add(c);
//                modeloComidasNoSelec.removeRow(i);
            }
        }
        cargarComidas2(listaComidasNueva4);
    }//GEN-LAST:event_jbFiltrarActionPerformed

    private void jbSumarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSumarActionPerformed
        // TODO add your handling code here:
        int a = modeloComidasSelec.getRowCount();
        double suma = 0;
        
        for (int i=0; i<a; i++){
            int idComida = (Integer)modeloComidasSelec.getValueAt(i, 0);
            Comida c = comidaData.buscarComida(idComida);
            suma += c.getCalorias();
        }
        
        jtSumaCalorias.setText(suma+"");
    }//GEN-LAST:event_jbSumarActionPerformed

    private void jbVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVolverActionPerformed
        // TODO add your handling code here:
        borrarFilasTablaNoSelec();
        borrarFilasTablaSelec();
        cargarComidas();
        listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(paciente.getId(), LocalDate.of(2090,05,04));
    }//GEN-LAST:event_jbVolverActionPerformed

    private void jtFecInicioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtFecInicioFocusLost
        // TODO add your handling code here:
        try{
            LocalDate fec = LocalDate.parse(jtFecInicio.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            if (fec.isBefore(LocalDate.now())){
                jtMensaje.setText("FECHA ANTERIIOR AL DIA DE HOY. INGRESE FECHA NUEVAMENTE");
                jtFecInicio.requestFocus();
            }else{
                jtMensaje.setText("");
            }
        }catch(DateTimeParseException ex){
            jtMensaje.setText("FORMATO DE FECHA INCORRECTO. INGRESE FECHA NUEVAMENTE");
//            jtFecInicio.requestFocus();
        }
    }//GEN-LAST:event_jtFecInicioFocusLost

    private void jtFecFinalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtFecFinalFocusLost
        // TODO add your handling code here:
        LocalDate fecI = LocalDate.parse(jtFecInicio.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        try{
            LocalDate fecf = LocalDate.parse(jtFecFinal.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            
            if (fecf.isBefore(fecI)){
                jtMensaje.setText("FECHA ANTERIOR A LA INICIAL. INGRESE FECHA NUEVAMENTE");
                jtFecFinal.requestFocus();
            
            }else{
                jtMensaje.setText("");
            }
        }catch(DateTimeParseException ex){
            jtMensaje.setText("FORMATO DE FECHA INCORRECTO. INGRESE FECHA NUEVAMENTE");
//            jtFecFinal.requestFocus();
        }
    }//GEN-LAST:event_jtFecFinalFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Paciente> cbPacientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbFiltrar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbLimpiar;
    private javax.swing.JButton jbQuitar;
    private javax.swing.JButton jbSumar;
    private javax.swing.JButton jbVolver;
    private javax.swing.JTextField jtCalorias;
    private javax.swing.JTextField jtFecFinal;
    private javax.swing.JTextField jtFecInicio;
    private javax.swing.JTextField jtMensaje;
    private javax.swing.JTextField jtPesoBuscado;
    private javax.swing.JTextField jtPesoInicial;
    private javax.swing.JTextField jtSumaCalorias;
    private javax.swing.JTable jtTablaComidasNoSelec;
    private javax.swing.JTable jtTablaComidasSelec;
    private javax.swing.JTable jtTablaFechas;
    // End of variables declaration//GEN-END:variables

    private void cargarPacientes() {
        for(Paciente item:listaPacientes){
            cbPacientes.addItem(item);
        }
        
        
//        cargarFechas();
//        cargarDieta();
    }

    private void armarCabeceraTablas() {
        ArrayList<Object> columnas=new ArrayList<Object>();
        columnas.add("ID");
        columnas.add("Nombre");
        for(Object it:columnas){
            modeloComidasNoSelec.addColumn(it);
            modeloComidasSelec.addColumn(it);
        }
        jtTablaComidasNoSelec.setModel(modeloComidasNoSelec);
        jtTablaComidasSelec.setModel(modeloComidasSelec);
    }

    private void cargarComidasNoSelec() {
        borrarFilasTablaNoSelec();
        
//        Paciente p = (Paciente)cbPacientes.getSelectedItem();
        int aux = 0;
//        listaComidasXPaciente = (ArrayList)dietaData.obtenerComidasXPaciente(p.getId());
        listaComidasNueva1 = (ArrayList)listaComidasXPaciente.clone();

        for (Comida c1:listaComidas){
            for (Comida c2:listaComidasNueva1){
                if (c1.getId() != c2.getId()){
                    aux += 1;
                }
            }
            
            if (listaComidasNueva1.size() == aux){
                modeloComidasNoSelec.addRow(new Object[]{c1.getId(),c1.getNombre()});
            }
            aux = 0;
        }
        listaComidasNueva1.clear();
            
    }

    private void borrarFilasTablaNoSelec() {
        
        int a = modeloComidasNoSelec.getRowCount()-1;

        for(int i=a;i>=0;i--){
   
            modeloComidasNoSelec.removeRow(i);
        }
    }

    private void cargarComidasSelec() {
        borrarFilasTablaSelec();
        
//        Paciente p = (Paciente)cbPacientes.getSelectedItem();
        listaComidasNueva2 = (ArrayList)listaComidasXPaciente.clone();
        
        for (Comida c:listaComidasNueva2){
            modeloComidasSelec.addRow(new Object[]{c.getId(),c.getNombre()});
        }
        
        listaComidasNueva2.clear();
    }

    private void borrarFilasTablaSelec() {
        int a = modeloComidasSelec.getRowCount()-1;

        for(int i=a;i>=0;i--){
   
            modeloComidasSelec.removeRow(i);
        }
    }

    private void cargarDieta() {
        
//        Paciente paciente = (Paciente)cbPacientes.getSelectedItem();
        int idPaciente = paciente.getId();
        if (modeloFechas.getRowCount() != 0){
            dieta = dietaData.buscarDietaXPaciente(idPaciente, fecha);
        }else{
            dieta = null;
        }
        
        if (dieta == null){
            
            jbGuardar.setEnabled(true);
            jbActualizar.setEnabled(false);
            jbBorrar.setEnabled(false);
            jbQuitar.setEnabled(false);
            
            jtFecInicio.setText("");
            jtFecFinal.setText("");
            jtPesoInicial.setText("");
            jtPesoBuscado.setText("");
        
        }else{
        
            jbGuardar.setEnabled(false);
            jbActualizar.setEnabled(true);
            jbBorrar.setEnabled(true);
            jbQuitar.setEnabled(true);
            
            String fecInicio = constructorFecha(dieta.getFechaInicial().toString());
            String fecFinal = constructorFecha(dieta.getFechaFinal().toString());
            
            jtFecInicio.setText(fecInicio);
            jtFecFinal.setText(fecFinal);
            jtPesoInicial.setText(dieta.getPesoInicial()+"");
            jtPesoBuscado.setText(dieta.getPesoBuscado()+"");
            
            if ((dieta.getFechaFinal()).isAfter(LocalDate.now())){
                jtMensaje.setText("DIETA EN VIGENCIA");
            }else{
                jtMensaje.setText("DIETA VENCIDA");
            }
                
        }
    }

    private String constructorFecha(String unString) {
        String anio = (String) unString.subSequence(0, 4);
        String mes = (String) unString.subSequence(5, 7);
        String dia = (String) unString.subSequence(8, 10);
        return dia + "/" + mes + "/" + anio;
    }

    private void cargarFechas() {
        
        borrarFilasFechas();
        listaDietas = (ArrayList)dietaData.buscarDietasXPaciente(paciente.getId());
        listaDietasNueva1 = (ArrayList)listaDietas.clone();
        for (Dieta d: listaDietasNueva1){
            modeloFechas.addRow(new Object[]{d.getId(), constructorFecha(d.getFechaInicial().toString())});
        }
        
        listaDietasNueva1.clear();
        
    }

    private void armarCabeceraTablaFechas() {
        ArrayList<Object> columnas=new ArrayList<Object>();
        columnas.add("idDieta");
        columnas.add("Fecha");
        for(Object it:columnas){
            modeloFechas.addColumn(it);
        }
        jtTablaFechas.setModel(modeloFechas);
    }

    private void borrarFilasFechas() {
        int a = modeloFechas.getRowCount()-1;

        for(int i=a;i>=0;i--){
   
            modeloFechas.removeRow(i);
        }
    }

    private void cargarComidas() {
        borrarFilasTablaNoSelec();
        listaComidasNueva2 = (ArrayList)listaComidas.clone();
        
        for (Comida c:listaComidasNueva2){
            modeloComidasNoSelec.addRow(new Object[]{c.getId(),c.getNombre()});
        }
        
        listaComidasNueva2.clear();
    }

    private void cargarComidas2(ArrayList<Comida> lista) {
        borrarFilasTablaNoSelec();
        listaComidasNueva2 = (ArrayList)lista.clone();
        
        for (Comida c:listaComidasNueva2){
            modeloComidasNoSelec.addRow(new Object[]{c.getId(),c.getNombre()});
        }
        
        listaComidasNueva2.clear();
    }
}
